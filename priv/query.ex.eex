# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  @moduledoc """
<%= context.docstring %>
  """
<%= for action <- context.actions do %>
  @doc """
<%= action.docstring %>
  """
  def <%= action.function_name %>(client, input, options \\ []) do
    request(client, "<%= action.name %>", input, options)
  end
<% end %>
  @spec request(AWS.Client.t(), binary(), map(), list()) ::
          {:ok, Poison.Parser.t() | nil, Poison.Response.t()}
          | {:error, Poison.Parser.t()}
          | {:error, HTTPoison.Error.t()}
  defp request(client, action, input, options) do
    client = %{client | service: "<%= context.endpoint_prefix %>"}
    host = get_host("<%= context.endpoint_prefix %>", client)
    url = get_url(host, client)

    headers = if client.session_token do
      [{"X-Amz-Security-Token", client.session_token}]
    else
      []
    end

    headers =
      [ {"Host", host},
        {"Content-Type", "application/x-www-form-urlencoded"}
        | headers
      ]

    input = %{ input
               | "Action" => action, "Version" => "<%= context.api_version %>"
             }
    payload = :uri_string.compose_query(Map.to_list(input))
    headers = AWS.Request.sign_v4(client, "POST", url, headers, payload)

    case HTTPoison.post(url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: 200, body: ""} = response} ->
        {:ok, nil, response}

      {:ok, %HTTPoison.Response{status_code: 200, body: body} = response} ->
        {:ok, AWS.Util.decode_xml(body), response}

      {:ok, %HTTPoison.Response{body: body}} ->
        error = AWS.Util.decode_xml(body)
        exception = error["ErrorResponse"]["Error"]["Code"]
        message = error["ErrorResponse"]["Error"]["Message"]
        {:error, {exception, message}}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp get_host(endpoint_prefix, client) do
    if client.region == "local" do
      "localhost"
    else
      "#{endpoint_prefix}.#{client.region}.#{client.endpoint}"
    end
  end

  defp get_url(host, %{:proto => proto, :port => port}) do
    "#{proto}://#{host}:#{port}/"
  end
end
