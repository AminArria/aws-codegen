%% WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
%% See https://github.com/aws-beam/aws-codegen for more details.

<%= if context.docstring != "%% @doc" do %><%= context.docstring %><% end %>
-module(<%= context.module_name %>).

-export([<%= Enum.map(context.actions, fn(action) -> ["#{action.function_name}/#{action.arity - 1}", "#{action.function_name}/#{action.arity}"] end) |> List.flatten |> Enum.join(",\n         ") %>]).

-include_lib("hackney/include/hackney_lib.hrl").

%%====================================================================
%% API
%%====================================================================
<%= for action <- context.actions do %>
<%= action.docstring %><%= if action.method == "GET" do %>
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>)
  when is_map(Client) ->
    <%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, []).
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Options)
  when is_map(Client), is_list(Options) ->
    Path = ["<%= AWS.CodeGen.RestService.Action.url_path(action) %>"],
    SuccessStatusCode = <%= if is_nil(action.success_status_code), do: "undefined", else: inspect(action.success_status_code) %>,
    <%= if length(action.request_header_parameters) > 0 do %> Headers0 =
      [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
        {<<"<%= parameter.location_name %>">>, <%= parameter.code_name %>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
        {<<"<%= parameter.location_name %>">>, <%= parameter.code_name %>}
      <% end %>],
    Headers = [H || {_, V} = H <- Headers0, V =/= undefined],
    <% else %>Headers = [],<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client, get, Path, Headers, undefined, Options, SuccessStatusCode) of
      {ok, Body0, {_, ResponseHeaders, _} = Response} ->
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client, get, Path, Headers, undefined, Options, SuccessStatusCode).<% end %>
<% else %>
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input) ->
    <%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input, []).
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input0, Options) ->
    Method = <%= AWS.CodeGen.RestService.Action.method(action) %>,
    Path = ["<%= AWS.CodeGen.RestService.Action.url_path(action) %>"],
    SuccessStatusCode = <%= if is_nil(action.success_status_code), do: "undefined", else: inspect(action.success_status_code) %>,
    <%= if length(action.request_header_parameters) > 0 do %>
    HeadersMapping = [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                     <% end %>],
    {Headers, Input} = aws_request:build_headers(HeadersMapping, Input0),
    <% else %>Headers = [],
    Input = Input0,<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client, Method, Path, Headers, Input, Options, SuccessStatusCode) of
      {ok, Body0, {_, ResponseHeaders, _} = Response} ->
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client, Method, Path, Headers, Input, Options, SuccessStatusCode).<% end %>
<% end %><% end %>
%%====================================================================
%% Internal functions
%%====================================================================

-spec request(aws_client:aws_client(), atom(), iolist(),
              list(), map() | undefined, list(), pos_integer() | undefined) ->
    {ok, Result, {integer(), list(), hackney:client()}} |
    {error, Error, {integer(), list(), hackney:client()}} |
    {error, term()} when
    Result :: map() | undefined,
    Error :: {binary(), binary()}.
request(Client, Method, Path, Headers0, Input, Options, SuccessStatusCode) ->
    Client1 = Client#{service => <<"<%= context.signing_name %>">><%= if context.is_global do %>,
                      region => <<"<%= context.credential_scope %>">><% end %>},
    <%= if context.endpoint_prefix == "s3-control" do %>
    AccountId = proplists:get_value(<<"x-amz-account-id">>, Headers0),
    Host = get_host(AccountId, <<"<%= context.endpoint_prefix %>">>, Client1),
    <% else %>
    Host = get_host(<<"<%= context.endpoint_prefix %>">>, Client1),
    <% end %>
    URL = get_url(Host, Path, Client1),
    Headers1 = [
        {<<"Host">>, Host},
        {<<"Content-Type">>, <<"text/xml">>}
        | Headers0
    ],
    Payload = encode_payload(Input),
    MethodBin = aws_request:method_to_binary(Method),
    SignedHeaders = aws_request:sign_request(Client1, MethodBin, URL, Headers1, Payload),
    Response = hackney:request(Method, URL, SignedHeaders, Payload, Options),
    handle_response(Response, SuccessStatusCode).

handle_response({ok, StatusCode, ResponseHeaders, Client}, SuccessStatusCode)
  when StatusCode =:= 200;
       StatusCode =:= 202;
       StatusCode =:= 204;
       StatusCode =:= SuccessStatusCode ->
    case hackney:body(Client) of
        {ok, <<>>} when StatusCode =:= 200;
                        StatusCode =:= SuccessStatusCode ->
            {ok, undefined, {StatusCode, ResponseHeaders, Client}};
        {ok, Body} ->
            Result = aws_util:decode_xml(Body),
            {ok, Result, {StatusCode, ResponseHeaders, Client}}
    end;
handle_response({ok, StatusCode, ResponseHeaders, Client}, _) ->
    {ok, Body} = hackney:body(Client),
    Error = aws_util:decode_xml(Body),
    %% TODO: maybe unnecessary
    MessagePath1 = [<<"ErrorResponse">>, <<"Error">>, <<"message">>],
    Reason1 = aws_util:get_in(MessagePath1, Error),
    MessagePath2 = [<<"ErrorResponse">>, <<"Error">>, <<"Message">>],
    Reason2 = aws_util:get_in(MessagePath2, Error, Reason1),
    {error, Reason2, {StatusCode, ResponseHeaders, Client}};
handle_response({error, Reason}, _) ->
  {error, Reason}.

<%= if context.endpoint_prefix == "s3-control" do %>
get_host(_AccountId, _EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;
get_host(undefined, _EndpointPrefix, _Client) ->
    error(missing_account_id);
get_host(AccountId, EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([AccountId, EndpointPrefix, Region, Endpoint],
                         <<".">>).<% else %>
get_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;<%= if context.is_global do %>
get_host(EndpointPrefix, #{endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>).
<% else %>
get_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>).
<% end %><% end %>
get_url(Host, Path0, Client) ->
    Proto = maps:get(proto, Client),
    Path = erlang:iolist_to_binary(Path0),
    Port = maps:get(port, Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, Path], <<"">>).

-spec encode_payload(undefined | map()) -> binary().
encode_payload(undefined) ->
  <<>>;
encode_payload(Input) ->
  aws_util:encode_xml(Input).
