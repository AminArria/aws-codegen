# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/jkakar/aws-codegen for more details.

defmodule AWS.<%= context.module_name %> do
  @moduledoc """
<%= context.docstring %>
  """
<%= for action <- context.actions do %>
  @doc """
<%= action.docstring %>
  """
<%= if action.method == "GET" do %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestJSONService.function_parameters(action) %>, options \\ []) do
    parameters = %{}
    <%= for parameter <- actions.parameters do %>
    if <%= parameters.code_name %> != nil do
      parameters = Map.merge(parameters, %{"<%= parameters.name %>" => <%= parameters.code_name %>})
    end
    <% end %>
    query_string = URI.encode_query(parameters)
    url = "<%= AWS.CodeGen.RestJSONService.Action.url(action) %>?#{query_string}"
    request(client, "GET", url, nil, options, <%= action.expected_status_code %>)
  end
<% else %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestJSONService.function_parameters(action) %>, input, options \\ []) do
    url = "<%= AWS.CodeGen.RestJSONService.Action.url(action) %>"
    request(client, "<%= action.method %>", url, input, options, <%= action.expected_status_code %>)
  end
<% end %>
<% end %>
  defp request(client, method, url, input, options, success_status_code) do
    client = %{client | service: "lambda"}
    host = "lambda.#{client.region}.#{client.endpoint}"
    url = "https://#{host}#{url}"
    headers = [{"Host", host},
               {"Content-Type", "application/x-amz-json-1.1"}]
    payload = encode_payload(input)
    headers = AWS.Request.sign_v4(client, method, url, headers, payload)
    case HTTPoison.request(to_atom(method), url, payload, headers, options) do
      {:ok, response=%HTTPoison.Response{status_code: success_status_code, body: body}} ->
        {:ok, Poison.Parser.parse!(body), response}
      {:ok, _response=%HTTPoison.Response{body: body}} ->
        reason = Poison.Parser.parse!(body)["message"]
        {:error, reason}
      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp encode_payload(input) do
    if input != nil do
      Poison.Encoder.encode(input, [])
    else
      ""
    end
  end

  defp to_atom(method) do
    method |> String.downcase |> String.to_atom
  end
end
