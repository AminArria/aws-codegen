# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/jkakar/aws-codegen for more details.

defmodule <%= context.module_name %> do
  @moduledoc """
<%= context.docstring %>
  """<%= for action <- context.actions do %>

  @doc """
<%= action.docstring %>
  """<%= if action.method == "GET" do %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestJSONService.function_parameters(action) %>, options \\ []) do
    url = "<%= AWS.CodeGen.RestJSONService.Action.url(action) %>"
    headers = []<%= for parameter <- action.request_header_parameters do %>
    headers = if !is_nil(<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", <%= parameter.code_name %>} | headers]
    else
      headers
    end<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(client, :get, url, headers, nil, options, <%= inspect(action.success_status_code) %>) do
      {:ok, body, response} ->
        body =
          [<%= for parameter <- action.response_header_parameters do %>
            {"<%= parameter.location_name %>", "<%= parameter.name %>"},<% end %>
          ]
          |> Enum.reduce(body, fn {header_name, key}, acc ->
            case List.keyfind(response.headers, header_name, 0) do
              nil -> acc
              {_header_name, value} -> Map.put(acc, key, value)
            end
          end)
        
        {:ok, body, response}

      result ->
        result
    end<% else %>
    request(client, :get, url, headers, nil, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% else %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestJSONService.function_parameters(action) %>, input, options \\ []) do
    url = "<%= AWS.CodeGen.RestJSONService.Action.url(action) %>"<%= if length(action.request_header_parameters) > 0 do %>

    {headers, input} =
      [<%= for parameter <- action.request_header_parameters do %>
        {"<%= parameter.name %>", "<%= parameter.location_name %>"},<% end %>
      ]
      |> AWS.Request.build_headers(input)
    <% else %>
    headers = []<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(client, <%= AWS.CodeGen.RestJSONService.Action.method(action) %>, url, headers, input, options, <%= inspect(action.success_status_code) %>) do
      {:ok, body, response} ->
        body =
          [<%= for parameter <- action.response_header_parameters do %>
            {"<%= parameter.location_name %>", "<%= parameter.name %>"},<% end %>
          ]
          |> Enum.reduce(body, fn {header_name, key}, acc ->
            case List.keyfind(response.headers, header_name, 0) do
              nil -> acc
              {_header_name, value} -> Map.put(acc, key, value)
            end
          end)
        
        {:ok, body, response}

      result ->
        result
    end<% else %>
    request(client, <%= AWS.CodeGen.RestJSONService.Action.method(action) %>, url, headers, input, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% end %><% end %>

  @spec request(AWS.Client.t(), binary(), binary(), list(), map(), list(), pos_integer()) ::
          {:ok, Poison.Parser.t() | nil, Poison.Response.t()}
          | {:error, Poison.Parser.t()}
          | {:error, HTTPoison.Error.t()}
  defp request(client, method, url, headers, input, options, success_status_code) do
    client = %{client | service: "<%= context.signing_name %>"}
    host = get_host("<%= context.endpoint_prefix %>", client)
    url = get_url(host, url, client)

    headers = if client.session_token do
      [{"X-Amz-Security-Token", client.session_token} | headers]
    else
      []
    end

    headers = [
      {"Host", host},
      {"Content-Type", "application/x-amz-json-1.1"} | headers
    ]

    payload = encode_payload(input)
    headers = AWS.Request.sign_v4(client, method, url, headers, payload)
    perform_request(method, url, payload, headers, options, success_status_code)
  end

  defp perform_request(method, url, payload, headers, options, nil) do
    case HTTPoison.request(method, url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: 200, body: ""} = response} ->
        {:ok, response}

      {:ok, %HTTPoison.Response{status_code: status_code, body: body} = response}
      when status_code == 200 or status_code == 202 or status_code == 204 ->
        {:ok, Poison.Parser.parse!(body, %{}), response}

      {:ok, %HTTPoison.Response{body: body}} ->
        reason = Poison.Parser.parse!(body, %{})["message"]
        {:error, reason}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp perform_request(method, url, payload, headers, options, success_status_code) do
    case HTTPoison.request(method, url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: ^success_status_code, body: ""} = response} ->
        {:ok, nil, response}

      {:ok, %HTTPoison.Response{status_code: ^success_status_code, body: body} = response} ->
        {:ok, Poison.Parser.parse!(body, %{}), response}

      {:ok, %HTTPoison.Response{body: body}} ->
        reason = Poison.Parser.parse!(body, %{})["message"]
        {:error, reason}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp get_host(endpoint_prefix, client) do
    if client.region == "local" do
      "localhost"
    else
      "#{endpoint_prefix}.#{client.region}.#{client.endpoint}"
    end
  end

  defp get_url(host, url, %{:proto => proto, :port => port}) do
    "#{proto}://#{host}:#{port}#{url}<%= if !Enum.member?(context.options, :strip_trailing_slash_in_url) do %>/<% end %>"
  end

  defp encode_payload(input) do
    if input != nil, do: Poison.Encoder.encode(input, %{}), else: ""
  end
end
